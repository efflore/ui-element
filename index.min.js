const t=t=>e=>typeof e===t,e=t("object"),s=t("function"),n=Symbol("nothing"),o=t=>s(t)?o(t()):t,c=(t,e)=>t&&s(t[e]),r=t=>(t=>(t=>null!=t)(t)&&(e(t)||s(t)))(t)&&c(t,"map"),i=t=>(t=>(t=>null==t)(t)||s(t)&&"type"in t&&t.type===n)(t)?h():a(t),a=t=>{const e=()=>t;return e.type=typeof t,e.map=e=>i(e(t)),e},h=()=>new Proxy((()=>{}),{get:(t,e)=>"type"===e?n:"toString"===e?()=>"":()=>h()});let l;const u=t=>s(t)&&c(t,"set"),f=t=>u(t)||(t=>s(t)&&c(t,"run")&&"effects"in t)(t),d=t=>{const e=()=>(l&&e.effects.add(l),t);return e.effects=new Set,e.set=n=>{const c=t;t=s(n)&&!f(n)?r(t)?t.map(n):n(t):n,!Object.is(o(t),o(c))&&(t=>{for(const e of t)e.run()})(e.effects)},e},p=t=>{const e=new Map,n=()=>{const o=l;l=n;const c=t(((t,s)=>{!e.has(t)&&e.set(t,new Set),e.get(t)?.add(s)}));for(const t of e.values()){for(const e of t)e();t.clear()}l=o,s(c)&&queueMicrotask(c)};n.run=()=>n(),n.targets=e,n()},g="context-request";class b extends Event{context;callback;subscribe;constructor(t,e,s=!1){super(g,{bubbles:!0,composed:!0}),this.context=t,this.callback=e,this.subscribe=s}}class y extends HTMLElement{static registry=customElements;static attributeMap={};static consumedContexts;static providedContexts;static define(t){try{this.registry.get(t)||this.registry.define(t,this)}catch(t){console.error(t)}}#t=new Map;attributeChangedCallback(t,e,n){if(n===e)return;const o=this.constructor.attributeMap[t],c=i(n);this.set(t,s(o)?c.map((t=>o(t,this,e))):c)}connectedCallback(){const t=this.constructor,e=t.consumedContexts||[];for(const t of e)this.set(String(t),void 0);setTimeout((()=>{for(const t of e)this.dispatchEvent(new b(t,(e=>this.set(String(t),e))))}));const n=t.providedContexts||[];n.length&&this.addEventListener(g,(t=>{const{context:e,callback:o}=t;n.includes(e)&&s(o)&&(t.stopPropagation(),o(this.#t.get(String(e))))}))}has(t){return this.#t.has(t)}get(t){return o(this.#t.get(t))}set(t,e,s=!0){if(this.#t.has(t)){if(s){const s=this.#t.get(t);u(s)&&s.set(e)}}else this.#t.set(t,f(e)?e:d(e))}delete(t){return this.#t.delete(t)}async pass(t,e){if(await this.constructor.registry.whenDefined(t.localName),!c(t,"set"))throw new TypeError("Expected UIElement");for(const[n,o]of Object.entries(e))t.set(n,f(o)?o:s(o)?d(o):this.#t.get(o))}signal(t){return this.#t.get(t)}}export{y as default,p as effect};