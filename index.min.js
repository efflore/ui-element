const t="context-request",e=t=>"function"==typeof t,s=(t,...e)=>{const n=e.shift();return!t.has(n)&&t.set(n,new Map),e.length?s(t.get(n),...e):t.get(n)};let n;const o=t=>{const s=()=>(n&&s.effects.add(n),t);return s.effects=new Set,s.set=n=>{const o=t;if(t=e(n)&&!e(t.set)?n(o):n,!Object.is(t,o))for(const t of s.effects)t()},s},c=t=>{const o=new Map,c=(t,e,n,c)=>s(o,t,e).set(n,c),a=()=>queueMicrotask((()=>{const s=n;n=a;const r=t(c);n=s;for(const[t,e]of o)for(const[s,n]of e)for(const[e,o]of n)s(t,e,o);e(r)&&r()}));a.targets=o,a()},a=t=>e(t)?a(t()):t,r=t=>"string"==typeof t,i=t=>parseInt(t,10),f=t=>parseFloat(t),h=t=>t;class l extends Event{context;callback;subscribe;constructor(e,s,n=!1){super(t,{bubbles:!0,cancelable:!0,composed:!0}),this.context=e,this.callback=s,this.subscribe=n}}class u extends HTMLElement{static define(t,e=customElements){try{e.get(t)||e.define(t,this)}catch(t){console.error(t)}}attributeMap={};contextMap={};#t=new Map;#e=new Map;#s=new Map;attributeChangedCallback(t,s,n){if(n!==s){const o=this.attributeMap[t],[c,a]=Array.isArray(o)?o:[t,o];this.set(c,e(a)?a(n,this,s):n)}}connectedCallback(){const n=Object.getPrototypeOf(this),o=n.providedContexts||[],a=this.#e;o.length&&(this.addEventListener(t,(t=>{const{target:n,context:c,callback:r,subscribe:i}=t;if(!o.includes(c)||!e(r))return;t.stopPropagation();const f=this.#t.get(c);if(i){const t=s(a,c);!t.has(n)&&t.set(n,r),r(f,(()=>t.delete(n)))}else r(f)})),o.forEach((t=>{c((()=>{const e=a.get(t),s=this.#t.get(t);for(const[t,n]of e)n(s,(()=>e.delete(t)))}))}))),setTimeout((()=>{n.consumedContexts?.forEach((t=>{const s=new l(t,((s,n)=>{this.#s.set(t,n);const o=this.contextMap[t],[c,a]=Array.isArray(o)?o:[t,o];this.#t.set(c||t,e(a)?a(s):s)}),!0);this.dispatchEvent(s)}))}))}has(t){return this.#t.has(t)}get(t){return a(this.#t.get(t))}set(t,s,n=!0){if(this.#t.has(t)){const o=this.#t.get(t);n&&e(o.set)&&o.set(s)}else{const n=e(s)&&e(s.set)?s:o(s);this.#t.set(t,n)}}delete(t){return this.#t.delete(t)}async pass(t,s,n=customElements){await n.whenDefined(t.localName);for(const[n,c]of Object.entries(s))t.set(n,o(e(c)?c:this.#t.get(c)))}targets(t){const e=new Set;for(const s of this.#t.get(t).effects)for(const t of s.targets.keys())e.add(t);return e}}export{l as ContextRequestEvent,r as asBoolean,i as asInteger,f as asNumber,h as asString,u as default,c as effect,a as unwrap};