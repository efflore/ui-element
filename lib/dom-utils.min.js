import t from"../index.js";import{effect as e}from"./cause-effect.js";const s=!0,o="data",r="text",a="prop",n="attr",c="class",i="style",l="hover",d="focus",u=t=>void 0!==t,g=(t,e,s)=>{const o=t=>{s(t,t.getAttribute(e)),t.removeAttribute(e)};t.hasAttribute(e)&&o(t);for(const s of b(t).all(`[${e}]`))o(s())},f=t=>`<${t.localName}${t.id&&`#${t.id}`}${t.className&&`.${t.className.replace(" ",".")}`}>`,h=t=>"string"==typeof t?`"${t}"`:"object"==typeof t?JSON.stringify(t):u(t)?t.toString():"undefined",b=t=>{const e=t.shadowRoot||t,s=()=>t;var o;return s.first=t=>{const s=e.querySelector(t);return s&&b(s)},s.all=t=>Array.from(e.querySelectorAll(t)).map((t=>b(t))),s[r]={get:()=>t.textContent?.trim()||"",set:e=>{Array.from(t.childNodes).filter((t=>t.nodeType!==Node.COMMENT_NODE)).forEach((t=>t.remove())),t.append(document.createTextNode(e))}},s[a]={get:e=>t[e],set:(e,s)=>t[e]=s},s[n]={get:e=>t.getAttribute(e),set:(e,s)=>"boolean"==typeof s?t.toggleAttribute(e,s):u(s)?t.setAttribute(e,s):t.removeAttribute(e)},s[c]={get:e=>t.classList.contains(e),set:(e,s)=>t.classList.toggle(e,s)},((o=t)instanceof HTMLElement||o instanceof SVGElement||o instanceof MathMLElement)&&(s[i]={get:e=>t.style.getPropertyValue(e),set:(e,s)=>u(s)?t.style.setProperty(e,s):t.style.removeProperty(e)}),s},m=t=>{[r,a,n,c,i].forEach((s=>{const a=`${o}-${t.localName}-${s}`;g(t,a,s===r?(o,r)=>{const a=r.trim(),n=b(o)[s],c=n.get();t.set(a,c,!1),e((e=>{if(t.has(a)){const s=t.get(a);e(o,(()=>n.set(u(s)?s:c)))}}))}:(o,r)=>{const a=(t,e)=>t.split(e).map((t=>t.trim()));a(r,";").forEach((r=>{const[n,c=n]=a(r,":"),i=b(o)[s];t.set(c,i.get(),!1),e((e=>{if(t.has(c)){const s=t.get(c);e(o,(()=>i.set(n,s)))}}))}))})}))},$=(t,e="ui-effect")=>{[l,d].forEach((s=>{const[r,a]=s===l?["mouseenter","mouseleave"]:["focus","blur"];g(t,`${o}-${t.localName}-${s}`,((s,o)=>{const n=o.trim(),c=(o,r)=>s.addEventListener(o,(()=>{for(const s of t.targets(n))s.classList.toggle(e,r)}));c(r,!0),c(a,!1)}))}))};class p extends t{connectedCallback(){"string"==typeof this.getAttribute("debug")&&this.set("debug",!0),this.log(`Connected ${f(this)}`)}disconnectedCallback(){this.log(`Disconnected ${f(this)}`)}adoptedCallback(){this.log(`Adopted ${f(this)}`)}attributeChangedCallback(t,e,s){this.log(`Attribute "${t}" of ${f(this)} changed from ${h(e)} to ${h(s)}`),super.attributeChangedCallback(t,e,s)}get(t){const e=super.get(t);return this.log(`Get current value of state ${h(t)} in ${f(this)} (value: ${h(e)}) and track its use in effect`),e}set(t,e,s=!0){this.log(`Set ${s?"":"default "}value of state ${h(t)} in ${f(this)} to ${h(e)} and trigger dependent effects`),super.set(t,e,s)}delete(t){return this.log(`Delete state ${h(t)} from ${f(this)}`),super.delete(t)}log(t){this.has("debug")&&console.debug(t)}}const y=(e,s={},o,r)=>{const a=class extends t{static observedAttributes=Object.keys(s);attributeMap=s;connectedCallback(){super.connectedCallback(),o&&o(this),m(this),$(this)}disconnectedCallback(){r&&r(this)}};return a.define(e),a};export{b as $,s as DEV_MODE,p as DebugElement,m as autoEffects,y as component,$ as highlightTargets};