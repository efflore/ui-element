import e from"../index.js";export default class extends e{debug=!1;attributeChangedCallback(e,t,r){this.log(`Attribute '${e}' of ${this.localName} changed from '${t}' to '${r}'`),super.attributeChangedCallback(e,t,r)}get(e){const t=super.get(e);return this.log(`Get current value of state '${String(e)}' in ${this.localName} (value: '${t}') and track its use in effect`),t}set(e,t,r=!0){this.log(`Set ${r?"":"default "}value of state '${String(e)}' in ${this.localName} to '${t}' and trigger dependent effects`),super.set(e,t,r)}effect(e){return this.debug&&"function"!=typeof e&&this.error(new TypeError(`Effect handler in ${this.localName} is not a function`)),super.effect(e)}log(e){this.debug&&console.debug(e)}error(e){throw e}}