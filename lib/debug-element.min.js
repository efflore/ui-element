import t,{effect as e}from"../index.js";const s=t=>`<${t.localName+(t.id&&"#"+t.id)+(t.className&&"."+t.className)}>`,a=t=>"string"==typeof t?`'${t}'`:t.toString();export default class extends t{debug=!1;connectedCallback(){this.log(`Connected ${s(this)}`)}disconnectedCallback(){this.log(`Disconnected ${s(this)}`)}adoptedCallback(){this.log(`Adopted ${s(this)}`)}attributeChangedCallback(t,e,a){this.log(`Attribute '${t}' of ${s(this)} changed from '${e}' to '${a}'`),super.attributeChangedCallback(t,e,a)}get(t){const e=super.get(t);return this.log(`Get current value of state '${String(t)}' in ${s(this)} (value: ${a(e)}) and track its use in effect`),e}set(t,e,i=!0){this.log(`Set ${i?"":"default "}value of state '${String(t)}' in ${s(this)} to ${a(e)} and trigger dependent effects`),super.set(t,e,i)}log(t){this.debug&&console.debug(t)}error(t){throw t}}