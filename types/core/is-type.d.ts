type Primitive = 'undefined' | 'symbol' | 'boolean' | 'number' | 'string' | 'bigint' | 'object' | 'function';
declare const isOfType: <T>(type: Primitive) => (value: unknown) => value is T;
declare const isUndefined: (value: unknown) => value is undefined;
declare const isSymbol: (value: unknown) => value is symbol;
declare const isBoolean: (value: unknown) => value is boolean;
declare const isNumber: (value: unknown) => value is number;
declare const isString: (value: unknown) => value is string;
declare const isObject: (value: unknown) => value is object;
declare const isPropertyKey: (value: unknown) => value is PropertyKey;
declare const isFunction: (value: unknown) => value is Function;
declare const isNullaryFunction: (fn: unknown) => fn is (() => unknown);
declare const isVariadicFunction: (fn: unknown) => fn is ((...args: unknown[]) => unknown);
declare const isUnaryFunction: (fn: unknown) => fn is ((arg: unknown) => unknown);
declare const isBinaryFunction: (fn: unknown) => fn is ((arg1: unknown, arg2: unknown) => unknown);
declare const isTernaryFunction: (fn: unknown) => fn is ((arg1: unknown, arg2: unknown, arg3: unknown) => unknown);
declare const callFunction: (fn: unknown, ...args: unknown[]) => unknown;
declare const isNull: (value: unknown) => value is null;
declare const isNullish: (value: unknown) => value is null | undefined;
declare const isDefined: <T>(value: unknown) => value is NonNullable<T>;
declare const isFalse: (value: unknown) => boolean;
declare const isFalsy: (value: unknown) => boolean;
declare const isTrue: (value: unknown) => boolean;
declare const isTruthy: (value: unknown) => boolean;
declare const isDefinedObject: (value: unknown) => value is Record<PropertyKey, unknown>;
declare const isObjectOfType: (value: unknown, type: string) => value is Record<PropertyKey, unknown>;
declare const hasProperty: <T>(obj: T, name: keyof T) => obj is T & Record<PropertyKey, unknown>;
declare const getProperty: <T>(obj: T, name: keyof T) => T[keyof T] | undefined;
declare const setProperty: <T>(obj: T, prop: keyof T, value: T[keyof T]) => boolean;
declare const hasMethod: <T, K extends keyof T>(obj: T, name: K) => obj is T & Record<K, Function>;
declare const callMethod: <T, K extends keyof T>(obj: T, name: K, ...args: unknown[]) => unknown;
declare const isInstanceOf: (constructor: typeof Element) => (value: Node) => value is Element;
declare const isElement: (node: Node) => node is Element;
declare const isComment: (node: Node) => node is Comment;
export { isOfType, isUndefined, isSymbol, isBoolean, isNumber, isString, isObject, isPropertyKey, isFunction, isNullaryFunction, isVariadicFunction, isUnaryFunction, isBinaryFunction, isTernaryFunction, callFunction, isNull, isNullish, isDefined, isFalse, isFalsy, isTrue, isTruthy, isDefinedObject, isObjectOfType, hasProperty, getProperty, setProperty, hasMethod, callMethod, isInstanceOf, isElement, isComment };
