let t;const e=t=>{for(const e of t)e.run()},s=t=>"function"==typeof t,n=t=>s(t)&&s(t.set),f=f=>{const o=()=>(t&&o.effects.add(t),f);return o.effects=new Set,o.set=t=>{const c=f;f=s(t)&&!n(t)?t(c):t,!Object.is(f,c)&&e(o.effects)},o},o=(s,n=!1)=>{let f,o=!0;const c=()=>{if(t&&c.effects.add(t),n&&!o)return f;const e=t;return t=c,f=s(),o=!1,t=e,f};return c.effects=new Set,c.run=()=>{o=!0,n&&e(c.effects)},c},c=e=>{const n=new Map,f=()=>{const o=t;t=f;const c=e(((t,e)=>{!n.has(t)&&n.set(t,new Set),n.get(t).add(e)}));for(const t of n.values())for(const e of t)e();t=o,s(c)&&queueMicrotask(c)};f.run=()=>f(),f.targets=n,f()};export{f as cause,o as derive,c as effect,s as isFunction,n as isState};