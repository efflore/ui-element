let t;const e=t=>{for(const e of t)e.run()},s=t=>"function"==typeof t,n=t=>s(t)&&s(t.set),o=o=>{const c=()=>(t&&c.effects.add(t),o);return c.effects=new Set,c.set=t=>{const f=o;o=s(t)&&!n(t)?t(f):t,!Object.is(o,f)&&e(c.effects)},c},c=s=>{const n=()=>{const e=t;t=n;const o=s();return t=e,o};return n.effects=new Set,n.run=()=>e(n.effects),n},f=e=>{const n=new Map,o=()=>{const c=t;t=o;const f=e(((t,e)=>{!n.has(t)&&n.set(t,new Set),n.get(t).add(e)}));for(const t of n.values())for(const e of t)e();t=c,s(f)&&queueMicrotask(f)};o.run=()=>o(),o.targets=n,o()};export{o as cause,c as derive,f as effect,s as isFunction,n as isState};